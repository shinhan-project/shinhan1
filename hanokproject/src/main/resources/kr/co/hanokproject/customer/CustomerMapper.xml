<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.hanokproject.customer.CustomerMapper">

	<select id="login" parameterType="map" resultType="kr.co.hanokproject.customer.CustomerVO"> 
	SELECT * FROM USERS_CUSTOMER WHERE customer_id=#{customer_id} AND customer_pwd = MD5(#{customer_pwd}) 
	</select>
	
	<!-- 회원가입 -->
	<insert id="regist" parameterType="kr.co.hanokproject.customer.CustomerVO">
      INSERT INTO USERS_CUSTOMER (customer_id, customer_pwd,customer_name,customer_address,customer_email,customer_tel,customer_created) VALUES (#{customer_id}, MD5(#{customer_pwd}), #{customer_name}, #{customer_address}, #{customer_email},#{customer_tel}, NOW())
	</insert>
	
	<!-- 수정 -->

	<select id="detail" resultType="kr.co.hanokproject.customer.CustomerVO" parameterType="int">
		SELECT * FROM USERS_CUSTOMER WHERE customer_id=#{customer_id}
	</select>
	
	<update id="update" parameterType="kr.co.hanokproject.customer.CustomerVO">
		UPDATE USERS_CUSTOMER SET
			customer_tel = #{customer_tel},
			customer_address = #{customer_address}	
		WHERE customer_id = #{customer_id}
	</update>
	
	<!-- 한옥 검색 조건절 -->
	<sql id="searchSql">
	    where 1=1
        	<if test="capacity != null and capacity != ''">
                AND r.max_capacity &gt;= CONVERT(#{capacity}, UNSIGNED)
            </if>
            <if test="location != null and location != ''">
                AND h.hanok_address LIKE CONCAT('%', #{location}, '%')
            </if>
            <if test="checkInDate != null and checkOutDate != null">
                AND NOT EXISTS (
                    SELECT 1
                    FROM reservations res
                    WHERE res.room_id = r.room_id
                    AND (
                        res.checkin BETWEEN STR_TO_DATE(#{checkInDate}, '%Y-%m-%d') AND STR_TO_DATE(#{checkOutDate}, '%Y-%m-%d')
                        OR res.checkout BETWEEN STR_TO_DATE(#{checkInDate}, '%Y-%m-%d') AND STR_TO_DATE(#{checkOutDate}, '%Y-%m-%d')
                    )
                )
            </if>
            AND h.hanok_status = 2
	</sql>

	<!-- 한옥 검색 -->
	<select id="searchHanok" parameterType="kr.co.hanokproject.customer.CustomerVO" resultType="kr.co.hanokproject.customer.CustomerVO">
        SELECT
        	MIN(ri.room_imgName) AS roomImage,
		    h.hanok_name AS hanokName,
		    r.room_name AS roomName,
		    r.room_price AS roomPrice,
		    h.hanok_id AS hanok_id 
        FROM 
		    HANOKS h
		JOIN 
		    ROOMS r ON h.hanok_id = r.hanok_id
		JOIN 
		    ROOM_IMAGES ri ON r.room_id = ri.room_id
		LEFT JOIN 
		    RESERVATIONS res ON r.room_id = res.room_id
		    	AND (
	                res.checkin &gt;= STR_TO_DATE(#{checkOutDate}, '%Y-%m-%d') 
	                OR res.checkout &lt;= STR_TO_DATE(#{checkInDate}, '%Y-%m-%d')
            	)
		<include refid="searchSql"/>
		GROUP BY 
		    h.hanok_name, r.room_name, r.room_price, h.hanok_id
	    ORDER BY 
        	r.room_price ASC
		LIMIT 6 OFFSET #{startIdx}
    </select>
    
   	<!-- 한옥 검색 카운트 -->
	<select id="count" parameterType="kr.co.hanokproject.customer.CustomerVO" resultType="int">
		SELECT COUNT(DISTINCT r.room_id)
        FROM 
		    HANOKS h
		JOIN 
		    ROOMS r ON h.hanok_id = r.hanok_id
		JOIN 
		    ROOM_IMAGES ri ON r.room_id = ri.room_id
		LEFT JOIN 
		    RESERVATIONS res ON r.room_id = res.room_id
		    	AND (
	                res.checkin &gt;= STR_TO_DATE(#{checkOutDate}, '%Y-%m-%d') 
	                OR res.checkout &lt;= STR_TO_DATE(#{checkInDate}, '%Y-%m-%d')
            	)	
		<include refid="searchSql"/>
	</select>
	
	<select id="getHanokDetail" parameterType="int" resultType="kr.co.hanokproject.customer.CustomerVO">
	    SELECT 
	    	hanok_id,
	    	owner_id,
	    	hanok_name,
	    	hanok_tel,
	    	hanok_address,
	    	hanok_url,
	    	hanok_description,
	    	hanok_serviceETC,
	        hanok_name,
	        hanok_description,
	        hanok_score,
	        hanok_service0,
        	hanok_service1,
	        hanok_service2,
	        hanok_service3,
	        hanok_service4,
	        hanok_service5,
	        hanok_service6,
	        hanok_service7
	    FROM HANOKS
	    WHERE hanok_id = #{hanok_id}
	</select>
	
	<select id="getReviews" parameterType="int" resultType="kr.co.hanokproject.customer.CustomerVO">
	    SELECT 
	    	review_id,
	        review_title,
	        review_content,
	        review_date,
	        rating
	    FROM REVIEWS
	    WHERE hanok_id = #{hanok_id}
	    ORDER BY review_date DESC
	    LIMIT #{limit}
	</select>
	
	<select id="getHanokImg" parameterType="int" resultType="String">
		SELECT MIN(hanok_imgName) FROM HANOK_IMAGES WHERE hanok_id = #{hanok_id}
	</select>

	<select id="getRoomImg" parameterType="int" resultType="kr.co.hanokproject.customer.CustomerVO">
		SELECT
			hi.hanok_imgName AS hanok_imgName
		FROM HANOKS h JOIN HANOK_IMAGES hi ON h.hanok_id = hi.hanok_id
		LIMIT 1
	</select>
	
	<!-- 한옥 상세 정보 -->
    <select id="getHanokInfo" parameterType="int" resultType="kr.co.hanokproject.customer.CustomerVO">
        SELECT * FROM HANOKS WHERE hanok_id = #{hanok_id}
    </select>

    <!-- 객실 목록 -->
    <select id="getRoomList" parameterType="int" resultType="kr.co.hanokproject.customer.CustomerVO">
        SELECT * FROM ROOMS WHERE hanok_id = #{hanok_id}
    </select>

    <!-- 객실 이미지 -->
    <select id="getRoomImages" parameterType="int" resultType="kr.co.hanokproject.customer.CustomerVO">
        SELECT * FROM ROOM_IMAGES WHERE room_id = #{room_id}
    </select>
    
    <!-- 객실 정보 -->
    <select id="getRoomInfo" parameterType="int" resultType="kr.co.hanokproject.customer.CustomerVO">
    	SELECT * FROM ROOMS WHERE room_id = #{room_id}
    </select>
    
    <!-- 예약 정보 추가 -->
   	<insert id="reservation" parameterType="kr.co.hanokproject.customer.CustomerVO">
      INSERT INTO RESERVATIONS (checkin, checkout, created_at, reservation_price, reservation_name, pay_price, pay_date, pay_type, customer_id, room_id) 
      VALUES (
        #{checkin}, 
        #{checkout}, 
        NOW(),
        #{reservation_price}, 
        #{reservation_name}, 
        #{reservation_price}, 
        NOW(), 
        #{pay_type}, 
        #{customer_id}, 
        #{room_id})
	</insert>
	
	<!-- 특정 한옥 아이디로 리뷰 검색 -->
	<select id="getReviewList" resultType="kr.co.hanokproject.customer.CustomerVO" parameterType="int">
		SELECT 
			r.room_name AS room_name,
			re.review_title AS review_title,
			re.review_content AS review_content,
			re.rating AS rating,
			re.review_date AS review_date,
			ri.room_imgName AS room_imgName
		FROM 
			ROOMS r
			JOIN REVIEWS re ON r.room_id = re.room_id
			JOIN ROOM_IMAGES ri ON r.room_id = ri.room_id
		WHERE r.hanok_id=#{hanok_id}
		LIMIT 3
	</select>
	
		<!--여기가 수정한 부분! getallhanoks다시 넣음 -->
	 <select id="getAllHanoks" resultType="kr.co.hanokproject.hanok.HanokVO" parameterType="map">
        SELECT *,i.hanok_imgName
        FROM HANOKS h
        JOIN HANOK_IMAGES i ON i.hanok_id = h.hanok_id;
    </select>
</mapper>